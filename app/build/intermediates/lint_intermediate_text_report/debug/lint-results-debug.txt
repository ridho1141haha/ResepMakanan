C:\Users\ThinkPad T14\ResepMakanan\app\build.gradle:12: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 34
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\java\com\ridho\resepku\SplashActivity.java:11: Warning: The application should not provide its own launch screen [CustomSplashScreen]
public class SplashActivity extends AppCompatActivity {
             ~~~~~~~~~~~~~~

   Explanation for issues of type "CustomSplashScreen":
   Starting in Android 12 (API 31+), the application's Launch Screen is
   provided by the system and the application should not create its own,
   otherwise the user will see two splashscreens. Please check the
   SplashScreen class to check how the Splash Screen can be controlled and
   customized.

   https://developer.android.com/guide/topics/ui/splash-screen

C:\Users\ThinkPad T14\ResepMakanan\app\build.gradle:32: Warning: A newer version of androidx.appcompat:appcompat than 1.7.0 is available: 1.7.1 [GradleDependency]
    implementation "androidx.appcompat:appcompat:1.7.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\build.gradle:33: Warning: A newer version of com.google.android.material:material than 1.12.0 is available: 1.13.0 [GradleDependency]
    implementation "com.google.android.material:material:1.12.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\build.gradle:34: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.1.4 is available: 2.2.1 [GradleDependency]
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\build.gradle:35: Warning: A newer version of androidx.recyclerview:recyclerview than 1.3.2 is available: 1.4.0 [GradleDependency]
    implementation "androidx.recyclerview:recyclerview:1.3.2"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\AndroidManifest.xml:19: Warning: Expecting android:screenOrientation="unspecified" or "fullSensor" for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices [LockedOrientationActivity]
            android:screenOrientation="portrait">
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\AndroidManifest.xml:27: Warning: Expecting android:screenOrientation="unspecified" or "fullSensor" for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices [LockedOrientationActivity]
            android:screenOrientation="portrait" />
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\AndroidManifest.xml:30: Warning: Expecting android:screenOrientation="unspecified" or "fullSensor" for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices [LockedOrientationActivity]
            android:screenOrientation="portrait" />
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\AndroidManifest.xml:33: Warning: Expecting android:screenOrientation="unspecified" or "fullSensor" for this activity so the user can use the application in any orientation and provide a great experience on Chrome OS devices [LockedOrientationActivity]
            android:screenOrientation="portrait" />
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "LockedOrientationActivity":
   The <activity> element should not be locked to any orientation so that
   users can take advantage of the multi-window environments and larger
   screens available on Android. To fix the issue, consider declaring the
   corresponding activity element with `screenOrientation="unspecified"or
   "fullSensor"` attribute.

   https://developer.android.com/topic/arc/window-management

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\item_team.xml:10: Warning: This tag and its children can be replaced by one <TextView/> and a compound drawable [UseCompoundDrawables]
    <LinearLayout
     ~~~~~~~~~~~~

   Explanation for issues of type "UseCompoundDrawables":
   A LinearLayout which contains an ImageView and a TextView can be more
   efficiently handled as a compound drawable (a single TextView, using the
   drawableTop, drawableLeft, drawableRight and/or drawableBottom attributes
   to draw one or more images adjacent to the text).

   If the two widgets are offset from each other with margins, this can be
   replaced with a drawablePadding attribute.

   There's a lint quickfix to perform this conversion in the Eclipse plugin.

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_splash.xml:7: Warning: Possible overdraw: Root element paints background @color/colorBackground with a theme that also paints a background (inferred theme is @style/Theme_ResepMakanan_NoActionBar) [Overdraw]
    android:background="@color/colorBackground"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\values\colors.xml:7: Warning: The resource R.color.colorSurface appears to be unused [UnusedResources]
    <color name="colorSurface">#FFFFFF</color>
           ~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\values\colors.xml:12: Warning: The resource R.color.white appears to be unused [UnusedResources]
    <color name="white">#FFFFFFFF</color>
           ~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\adrian.jpg: Warning: Found bitmap drawable res/drawable/adrian.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\bakso.jpg: Warning: Found bitmap drawable res/drawable/bakso.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\gudeg.jpg: Warning: Found bitmap drawable res/drawable/gudeg.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\klepon.jpg: Warning: Found bitmap drawable res/drawable/klepon.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\mie_ayam.jpg: Warning: Found bitmap drawable res/drawable/mie_ayam.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\nasi_goreng.jpg: Warning: Found bitmap drawable res/drawable/nasi_goreng.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\rendang.jpg: Warning: Found bitmap drawable res/drawable/rendang.jpg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\sate_babi.jpeg: Warning: Found bitmap drawable res/drawable/sate_babi.jpeg in densityless folder [IconLocation]
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\telur_balado.jpg: Warning: Found bitmap drawable res/drawable/telur_balado.jpg in densityless folder [IconLocation]

   Explanation for issues of type "IconLocation":
   The res/drawable folder is intended for density-independent graphics such
   as shapes defined in XML. For bitmaps, move it to drawable-mdpi and
   consider providing higher and lower resolution versions in drawable-ldpi,
   drawable-hdpi and drawable-xhdpi. If the icon really is density independent
   (for example a solid color) you can place it in drawable-nodpi.

   https://developer.android.com/guide/practices/screens_support.html

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\drawable\telur_balado.jpg: Warning: The following unrelated icon files have identical contents: adrian.jpg, bakso.jpg, gudeg.jpg, klepon.jpg, mie_ayam.jpg, nasi_goreng.jpg, rendang.jpg, sate_babi.jpeg, telur_balado.jpg [IconDuplicates]

   Explanation for issues of type "IconDuplicates":
   If an icon is repeated under different names, you can consolidate and just
   use one of the icons and delete the others to make your application
   smaller. However, duplicated icons usually are not intentional and can
   sometimes point to icons that were accidentally overwritten or accidentally
   not updated.

C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_detail.xml:31: Warning: Hardcoded string "Foto detail resep", should use @string resource [HardcodedText]
                android:contentDescription="Foto detail resep"
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_detail.xml:60: Warning: Hardcoded string "Bahan-bahan", should use @string resource [HardcodedText]
                android:text="Bahan-bahan"
                ~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_detail.xml:79: Warning: Hardcoded string "Cara Membuat", should use @string resource [HardcodedText]
                android:text="Cara Membuat"
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_splash.xml:15: Warning: Hardcoded string "Kolase makanan", should use @string resource [HardcodedText]
        android:contentDescription="Kolase makanan"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\activity_splash.xml:27: Warning: Hardcoded string "APLIKASI RESEP MAKANAN", should use @string resource [HardcodedText]
        android:text="APLIKASI RESEP MAKANAN"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\item_recipe.xml:21: Warning: Hardcoded string "Foto resep", should use @string resource [HardcodedText]
            android:contentDescription="Foto resep"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\item_recipe.xml:30: Warning: Hardcoded string "Gudeg", should use @string resource [HardcodedText]
            android:text="Gudeg"
            ~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\item_team.xml:21: Warning: Hardcoded string "Avatar anggota tim", should use @string resource [HardcodedText]
            android:contentDescription="Avatar anggota tim"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Users\ThinkPad T14\ResepMakanan\app\src\main\res\layout\item_team.xml:30: Warning: Hardcoded string "Nama Anggota", should use @string resource [HardcodedText]
            android:text="Nama Anggota"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 33 warnings
